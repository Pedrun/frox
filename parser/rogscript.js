// Generated by Peggy 1.2.0.
//
// https://peggyjs.org/

"use strict";


  function randomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
  }
  function clamp(min, max, x) {
    return Math.max(Math.min(x, max), min);
  }

  function makeInteger(text, alt) {
    alt = alt ?? text;
    let value = parseInt(text, 10);
    return {
      value: value,
      values: [ value ],
      boolean: false,
      text: alt,
      dice: 0
    };
  }

  function makeLogic(left, right) {
    let result = left;
    for (let [op, operand] of right) {
      switch (op) {
        case "&&":
          result.left = (result.value && operand.value) ? 1 : 0;
          result.text += " && " + operand.text;
          break;
        case "||":
          result.left = (result.value || operand.value) ? 1 : 0;
          result.text += " || " + operand.text;
          break;
      }
      result.dice += operand.dice;
      result.boolean = true;
    }
    result.values = [result.value];
    return result;
  }

  function makeAddSub(left, right) {
    let result = left;
    let joined;
    for (let [op, operand] of right) {
      switch (op) {
        case "+":
          result.value += operand.value;
          result.values = [result.value];
          result.text = result.text + " + " + operand.text;
          break;
        case "-":
          result.value -= operand.value
          result.values = [result.value];
          result.text = result.text + " - " + operand.text;
          break;
        case "++":
          result.value += operand.value * result.values.length;
          result.values = result.values.map((val) => {
            return val + operand.value;
          });
          
          joined = "[" + result.values.join(", ") + "]";
          result.text = joined + " ⟵ " + result.text + " ++ " + operand.text;
          break;
        case "--":
            result.value -= operand.value * result.values.length;
            result.values = result.values.map((val) => {
            return val - operand.value;
          });
          
          joined = "[" + result.values.join(", ") + "]";
          result.text = joined + " ⟵ " + result.text + " -- " + operand.text;
          break;
      }
      result.dice += operand.dice;
      result.boolean = false;
    }
    return result;
  }

  function makeMultDiv(left, right) {
    let result = left;
    for (let [op, operand] of right) {
      if (op === "*") {
        result.value *= operand.value;
        result.values = result.values.map((val) => val * operand.value);
        result.text = result.text + " \\* " + operand.text;
      }
      else if (op === "/") {
        result.value /= operand.value;
        result.values = result.values.map((val) => val / operand.value);
        result.text = result.text + " / " + operand.text;
      }
      result.dice += operand.dice;
      result.boolean = false;
    }
    return result;
  }

  function makeUnary(op, operand) {
    switch(op) {
      case "!":
        operand.value = (operand.value) ? 0 : 1;
        operand.boolean = true;
        operand.text = "!" + operand.text;
        break;
      case "-":
        operand.value *= -1;
        operand.boolean = false;
        operand.text = "-" + operand.text;
        break;
      case "%":
        operand.value /= 100;
        operand.boolean = false;
        operand.text += "%";
        break;
    }

    operand.values = [operand.value];
    return operand;
  }

  function makeComparator(left, right, op) {
    let wasSuccess = false;
    switch(op) {
      case "<":
        wasSuccess = left.value < right.value;
        break;
      case "<=":
        wasSuccess = left.value <= right.value;
        break;
      case ">":
        wasSuccess = left.value > right.value;
        break;
      case ">=":
        wasSuccess = left.value >= right.value;
        break;
      case "=":
        wasSuccess = left.value === right.value;
        break;
    }
    wasSuccess = wasSuccess ? 1 : 0;
    const text = left.text + " " + op + " " + right.text;
    const value = wasSuccess;
    const values = [wasSuccess];
    return {
      value: value,
      values: values,
      boolean: true,
      text: text,
      dice: left.dice + right.dice
    };
  }

  function makeCounter(left, right, op) {
    let evaluator = () => { throw new Error("Nenhum Evaluator definido."); }
    switch(op) {
      case "<<":
        evaluator = function(v) { return v <= right.value; }
        break;
      case ">>":
        evaluator = function(v) { return v >= right.value; }
        break;
    }
    let count = 0;
    left.values.forEach(v => { count += evaluator(v) });
    return {
      value: count,
      values: [count],
      boolean: false,
      text: left.text + " " + op + " " + right.text,
      dice: left.dice + right.dice
    }
  }

  function roll(size, explodeConfiguration) {
    let allRolls = [],
    explodeSize = (explodeConfiguration && explodeConfiguration.value)
      ? explodeConfiguration.value
      : size;
    
    if (explodeSize < 2) error("O valor de Explodir precisa ser maior que 1.", "CUSTOM");
    if (explodeSize < size/1000) error("A chance de Explodir precisa ser menor que 99.9%", "CUSTOM");
    
    let lastRoll;
    do {
      lastRoll = randomInt(1, size);
      allRolls.push(lastRoll);
    } while (explodeConfiguration && lastRoll >= explodeSize)
    return allRolls;
  }
  function makeFateRoll(left) {
    let count = left ? left.value : 1;
    if (count > 100) error("Número máximo de dados é 100.", "CUSTOM");
    let valuesArr = [];
    for (let i = 0; i < count; i++) {
      valuesArr.push(...roll(3));
    }
    valuesArr = valuesArr.map(v => v-2);
    let accumulator = 0;
    valuesArr.forEach(v => accumulator += v)
    const textSymbols = ['**-**', '0', '**+**'];
    const textArr = valuesArr.map(v => textSymbols[v+1]);
    const text = '[' + textArr.join(', ') + '] ' + count + 'df';
    
    return {
      value: accumulator,
      values: valuesArr,
      boolean: false,
      text: text,
      dice: count
    };
  }
  function makeBasicRoll(left, right, explodeConfiguration, configuration) {
    const size = right.value;
    const count = left ? left.value : 1;
    const { aro, operator:keepDropOperator } = configuration;
    const sort = configuration.sort || ['k','d','kh','kl','dh','dl'].includes(keepDropOperator);
    let keepDropValue = clamp(configuration.value || 0, 0, count);
    if (size < 2) { error("Tamanho mínimo do dado é 2.", "CUSTOM"); }
    if (count > 100) { error("Número máximo de dados é 100.", "CUSTOM"); }
    let valuesArr = [];
    for (let i=0; i<count; i++) {
      valuesArr.push(...roll(size, explodeConfiguration));
    }
    if (aro && valuesArr.length > 1) {
      let allSame = valuesArr.every(v => v == valuesArr[0]);
      while (allSame) {
        const newVals = roll(size, explodeConfiguration);
        allSame = newVals.every(v => v == valuesArr[0]);
        valuesArr.push(...newVals);
      }
    }
    const augmentedValuesArr = valuesArr.map(v => { return {value: v, isKept: false}; });
    const sortedAugmentedValuesArr = Array.from(augmentedValuesArr).sort((a,b) => b.value - a.value);
    let keepRangeStart = 0;
    let keepRangeEndExclusive = sortedAugmentedValuesArr.length;
    let critrange = size;
    switch (keepDropOperator) {
      case "k":
      case "kh":
        keepRangeEndExclusive = keepDropValue;
        break;
      case "kl":
        keepRangeStart = sortedAugmentedValuesArr.length - keepDropValue;
        break;
      case "dh":
        keepRangeStart = keepDropValue;
        break;
      case "d":
      case "dl":
        keepRangeEndExclusive = sortedAugmentedValuesArr.length - keepDropValue
        break;
      case "c":
        critrange = configuration.value;
        keepDropValue = critrange;
        break;
    }
    sortedAugmentedValuesArr.slice(keepRangeStart, keepRangeEndExclusive).forEach(v => v.isKept = true);
    let accumulator = 0;
    augmentedValuesArr.filter(v => v.isKept).forEach(v => accumulator += v.value);
    const formatOrder = sort ? sortedAugmentedValuesArr : augmentedValuesArr;
    const textArr = formatOrder.map(v => dieFormatter(v.value, critrange, v.isKept));
    let text = "[" + textArr.join(", ") + "] " + (left ? left.text : 1) + "d" + right.text;
    if (explodeConfiguration) {
      text = text + "!";
      if (explodeConfiguration.value) {
        text = text + explodeConfiguration.value;
      }
    }
    if (keepDropOperator)
      text += keepDropOperator + keepDropValue
    valuesArr = formatOrder.filter(v => v.isKept).map(v => v.value);
    return {
      value: accumulator,
      values: valuesArr,
      boolean: false,
      text: text,
      dice: count
    };
  }
  function dieFormatter(value, size, isKept=true) {
    let formatted = value;
    if (value >= size)
      formatted = "**" + formatted + "**"
    else if (value === 1)
      formatted = "**" + formatted + "**"
    if (!isKept)
      formatted = "~~" + formatted + "~~"
    
    return formatted;
  }


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var loc = this.location.source + ":" + s.line + ":" + s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", s.line.toString().length);
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1)
          + peg$padEnd("", last - s.column, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Start: peg$parseStart };
  var peg$startRuleFunction = peg$parseStart;

  var peg$c0 = ";";
  var peg$c1 = ":=";
  var peg$c2 = "||";
  var peg$c3 = "&&";
  var peg$c4 = "<=";
  var peg$c5 = ">=";
  var peg$c6 = "=";
  var peg$c7 = "<";
  var peg$c8 = ">";
  var peg$c9 = "<<";
  var peg$c10 = ">>";
  var peg$c11 = "++";
  var peg$c12 = "--";
  var peg$c13 = "+";
  var peg$c14 = "-";
  var peg$c15 = "*";
  var peg$c16 = "/";
  var peg$c17 = "!";
  var peg$c18 = "%";
  var peg$c19 = "(";
  var peg$c20 = ")";
  var peg$c21 = "df";
  var peg$c22 = "d";
  var peg$c23 = "aro";
  var peg$c24 = "s";
  var peg$c25 = "kh";
  var peg$c26 = "kl";
  var peg$c27 = "k";
  var peg$c28 = "dh";
  var peg$c29 = "dl";
  var peg$c30 = "c";
  var peg$c31 = "$";

  var peg$r0 = /^[0-9]/;
  var peg$r1 = /^[A-Z_]/;
  var peg$r2 = /^[\t\n\r ]/;

  var peg$e0 = peg$literalExpectation(";", false);
  var peg$e1 = peg$anyExpectation();
  var peg$e2 = peg$literalExpectation(":=", false);
  var peg$e3 = peg$literalExpectation("||", false);
  var peg$e4 = peg$literalExpectation("&&", false);
  var peg$e5 = peg$literalExpectation("<=", false);
  var peg$e6 = peg$literalExpectation(">=", false);
  var peg$e7 = peg$literalExpectation("=", false);
  var peg$e8 = peg$literalExpectation("<", false);
  var peg$e9 = peg$literalExpectation(">", false);
  var peg$e10 = peg$literalExpectation("<<", false);
  var peg$e11 = peg$literalExpectation(">>", false);
  var peg$e12 = peg$literalExpectation("++", false);
  var peg$e13 = peg$literalExpectation("--", false);
  var peg$e14 = peg$literalExpectation("+", false);
  var peg$e15 = peg$literalExpectation("-", false);
  var peg$e16 = peg$literalExpectation("*", false);
  var peg$e17 = peg$literalExpectation("/", false);
  var peg$e18 = peg$literalExpectation("!", false);
  var peg$e19 = peg$literalExpectation("%", false);
  var peg$e20 = peg$literalExpectation("(", false);
  var peg$e21 = peg$literalExpectation(")", false);
  var peg$e22 = peg$literalExpectation("df", false);
  var peg$e23 = peg$literalExpectation("d", false);
  var peg$e24 = peg$literalExpectation("aro", false);
  var peg$e25 = peg$literalExpectation("s", false);
  var peg$e26 = peg$literalExpectation("kh", false);
  var peg$e27 = peg$literalExpectation("kl", false);
  var peg$e28 = peg$literalExpectation("k", false);
  var peg$e29 = peg$literalExpectation("dh", false);
  var peg$e30 = peg$literalExpectation("dl", false);
  var peg$e31 = peg$literalExpectation("c", false);
  var peg$e32 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e33 = peg$literalExpectation("$", false);
  var peg$e34 = peg$classExpectation([["A", "Z"], "_"], false, false);
  var peg$e35 = peg$otherExpectation("whitespace");
  var peg$e36 = peg$classExpectation(["\t", "\n", "\r", " "], false, false);
  var peg$e37 = peg$otherExpectation("forced whitespace");

  var peg$f0 = function(exp, label) {
      let output = "";
      if (exp.boolean) {
        output = exp.value ? "**Sucesso!**" : "**Falha!**";
      } else  {
        output = exp.value.toLocaleString("pt-BR");
      }

      let cutLabel = "";
      if (label?.length) {
        cutLabel = label[1]?.trim();
        if (cutLabel.length) {
          cutLabel = `**${cutLabel}** `;
        }
      }

      output = `${cutLabel}\` ${output} \` ⟵ ${exp.text}`;
      return {
        expression: exp,
        text: output,
        dice: exp.dice,
        labeled: !!label?.length,
        attributes: attributes,
        variables: variables
      }
    };
  var peg$f1 = function(attr) { return attributes.has(attr) };
  var peg$f2 = function(attr, val) {
      attributes.set(attr, clamp(val.value, Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER));
      val.text = attr + " := " + val.text;
      val.dice++;
      return val;
    };
  var peg$f3 = function(varb, val) {
      variables.set(varb, clamp(val.value, Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER));
      val.text = varb + " := " + val.text;
      val.dice++;
      return val;
    };
  var peg$f4 = function(left, right) {
      return makeLogic(left, right);
    };
  var peg$f5 = function(left, op, right) {
      return makeComparator(left, right, op);
    };
  var peg$f6 = function(left, op, right) {
      return makeCounter(left, right, op);
    };
  var peg$f7 = function(left, right) {
      return makeAddSub(left, right);
    };
  var peg$f8 = function(left, right) {
      return makeMultDiv(left, right);
    };
  var peg$f9 = function(op, right) {
      return makeUnary(op, right)
    };
  var peg$f10 = function(left, op) {
      return makeUnary(op, left);
    };
  var peg$f11 = function(expr) {
      expr.text = "(" + expr.text + ")";
      return expr;
    };
  var peg$f12 = function(left) {
      return makeFateRoll(left);
    };
  var peg$f13 = function(left, right, explodeConfiguration, configuration) {
      return makeBasicRoll(left, right, explodeConfiguration, configuration);
    };
  var peg$f14 = function(value) {
      return {
        value: value?.value
      }
    };
  var peg$f15 = function(keepDrop, aro, sort) {
      const configuration = keepDrop || {operator: null, value: null};
      configuration.sort = sort ? true: false;
      configuration.allSameAndExplode = aro ? true : false;
      return configuration;
    };
  var peg$f16 = function(operator, value) {
      return {
        operator: operator,
        value: value.value
      }
    };
  var peg$f17 = function() { return makeInteger(text()) };
  var peg$f18 = function(k) { return variables.has(k) };
  var peg$f19 = function(k) {
      const variable = variables.get(k);
      let integer = makeInteger(variable);
      // integer.text = "[" + variable + "] " + k;
      return integer;
    };
  var peg$f20 = function(k) { return attributes.has(k) };
  var peg$f21 = function(k) {
      const attribute = attributes.get(k);
      const integer = makeInteger(attribute);
      //integer.text = "[" + attribute + "] " + k;
      return integer;
    };

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseStart() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseAssingment();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s4 = peg$c0;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = [];
        if (input.length > peg$currPos) {
          s7 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          if (input.length > peg$currPos) {
            s7 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
        }
        s5 = input.substring(s5, peg$currPos);
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f0(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssingment() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseAttributeLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f1(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c1) {
          s4 = peg$c1;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseLogicOR();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f2(s1, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseVariableLiteral();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c1) {
          s3 = peg$c1;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseLogicOR();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f3(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseLogicOR();
      }
    }

    return s0;
  }

  function peg$parseLogicOR() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseLogicAND();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c2) {
        s5 = peg$c2;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseLogicAND();
        if (s7 !== peg$FAILED) {
          s3 = [ s5, s7 ];
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c2) {
          s5 = peg$c2;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseLogicAND();
          if (s7 !== peg$FAILED) {
            s3 = [ s5, s7 ];
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f4(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLogicAND() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseComparator();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c3) {
        s5 = peg$c3;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseComparator();
        if (s7 !== peg$FAILED) {
          s3 = [ s5, s7 ];
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c3) {
          s5 = peg$c3;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseComparator();
          if (s7 !== peg$FAILED) {
            s3 = [ s5, s7 ];
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f4(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComparator() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseCounter();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c4) {
        s3 = peg$c4;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c5) {
          s3 = peg$c5;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c6;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 60) {
              s3 = peg$c7;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s3 = peg$c8;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e9); }
              }
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseCounter();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f5(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseCounter();
    }

    return s0;
  }

  function peg$parseCounter() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseAddSub();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c9) {
        s3 = peg$c9;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c10) {
          s3 = peg$c10;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseAddSub();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f6(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseAddSub();
    }

    return s0;
  }

  function peg$parseAddSub() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseMultDiv();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c11) {
        s5 = peg$c11;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s5 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s5 = peg$c12;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s5 = peg$c14;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
          }
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseMultDiv();
        if (s7 !== peg$FAILED) {
          s3 = [ s5, s7 ];
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c11) {
          s5 = peg$c11;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c12) {
            s5 = peg$c12;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s5 = peg$c14;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e15); }
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseMultDiv();
          if (s7 !== peg$FAILED) {
            s3 = [ s5, s7 ];
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f7(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMultDiv() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseUnaryLeft();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 42) {
        s5 = peg$c15;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
      if (s5 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s5 = peg$c16;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseUnaryLeft();
        if (s7 !== peg$FAILED) {
          s3 = [ s5, s7 ];
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 42) {
          s5 = peg$c15;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e16); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c16;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e17); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseUnaryLeft();
          if (s7 !== peg$FAILED) {
            s3 = [ s5, s7 ];
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f8(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnaryLeft() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c14;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUnaryRight();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f9(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseUnaryRight();
    }

    return s0;
  }

  function peg$parseUnaryRight() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseGroup();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 37) {
        s2 = peg$c18;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f10(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseGroup();
    }

    return s0;
  }

  function peg$parseGroup() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c19;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLogicOR();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c20;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f11(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseBasicRoll();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFateRoll();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumber();
        }
      }
    }

    return s0;
  }

  function peg$parseNumber() {
    var s0;

    s0 = peg$parseNumberLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAttribute();
      if (s0 === peg$FAILED) {
        s0 = peg$parseVariable();
      }
    }

    return s0;
  }

  function peg$parseFateRoll() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 2) === peg$c21) {
      s2 = peg$c21;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f12(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBasicRoll() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 100) {
      s2 = peg$c22;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseNumber();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseExplodeConfiguration();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseBasicRollConfiguration();
        peg$savedPos = s0;
        s0 = peg$f13(s1, s3, s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExplodeConfiguration() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNumber();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f14(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBasicRollConfiguration() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseKeepDropConfiguration();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 3) === peg$c23) {
      s2 = peg$c23;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (input.charCodeAt(peg$currPos) === 115) {
      s3 = peg$c24;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    peg$savedPos = s0;
    s0 = peg$f15(s1, s2, s3);

    return s0;
  }

  function peg$parseKeepDropConfiguration() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c26) {
        s1 = peg$c26;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 107) {
          s1 = peg$c27;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c28) {
            s1 = peg$c28;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e29); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c29) {
              s1 = peg$c29;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e30); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 100) {
                s1 = peg$c22;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 99) {
                  s1 = peg$c30;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e31); }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNumber();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f16(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumberLiteral() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f17();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVariable() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseVariableLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f18(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVariableLiteral() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s2 = peg$c31;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseAttributeLiteral();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseAttribute() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseAttributeLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f20(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f21(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAttributeLiteral() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e35); }

    return s0;
  }

  function peg$parse___() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }

    return s0;
  }


    const attributes = new Map(options.attributes);
    const variables = new Map(options.variables);


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
